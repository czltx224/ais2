<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"
	default-lazy-init="false">

	<description>Spring公共配置 </description>
	
	<import resource="hessian/hessian_client.xml" />


	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:/config.properties</value>
				<value>classpath*:/application.properties</value>
				<!-- 集群中节点配置 -->
				<!--  	<value>classpath*:/application.cluster.properties</value>-->
				<!-- 本地开发环境配置 -->
				<!--	<value>classpath*:/application.local.properties</value>-->
				<!-- 服务器生产环境配置 -->
				 <value>file:/config/application.server.properties</value>
				 <value>file:/config/config.server.properties</value>
			</list>
		</property>
	</bean>


	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.xbwl" />
	
	<!-- dozer DTO复制工具类定义 -->
	<bean id="dozer" class="org.dozer.DozerBeanMapper" >
		<property name="mappingFiles">   
		    <list>   
		      <value>com/xbwl/rbac/vo/menuTree_vo.xml</value>
		      <value>com/xbwl/rbac/vo/commonMenuTree_vo.xml</value>
		       <value>com/xbwl/rbac/vo/departTree_vo.xml </value>
		       <value>com/xbwl/rbac/vo/SysDepart_vo.xml </value>
		    </list>   
		  </property>   
	</bean> 

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		
		<property name="driverClass"> <value>${jdbc.driver}</value></property>
      	<property name="jdbcUrl"><value>${jdbc.url}</value></property>
      	<property name="user"><value>${jdbc.username}</value></property>
      	<property name="password"> <value>${jdbc.password}</value></property>
		
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
      <property name="initialPoolSize"><value>${c3p0.initialSize}</value></property>
      <property name="minPoolSize"><value>${c3p0.minPoolSize}</value></property>
      <!--连接池中保留的最大连接数。Default: 15 -->
      <property name="maxPoolSize"><value>${c3p0.maxPoolSize}</value></property>
      <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
      <property name="acquireIncrement"><value>${c3p0.acquireIncrement}</value></property>
      <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
      <property name="maxIdleTime"><value>${c3p0.maxIdleTime}</value></property>
      <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
		   属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
		   如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->

		
		
		
		<!--  
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="initialSize" value="${dbcp.initialSize}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="false" />
		-->
	</bean>

	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!--
		<jee:jndi-lookup id="dataSource"
		jndi-name="java:comp/env/jdbc/ExampleDB" />
	-->

	<!-- Hibernate配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!--
					<prop
					key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
					<prop
					key="hibernate.cache.provider_configuration_file_resource_path">ehcache/ehcache-hibernate-local.xml</prop>
				-->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				  <value>com.xbwl.rbac.entity</value>
				  <value>com.xbwl.entity</value>
			<!--	<value>com.cndatacom.sysregister.pojo</value>
				<value>com.cndatacom.rbac.pojo</value>
				-->
			</list>
		</property>
	  	<property name="eventListeners">
			<map>
				<entry key="save-update">
					<list>
					 	<bean class="com.xbwl.common.orm.hibernate.AuditListener" />  
						<bean class="org.hibernate.event.def.DefaultSaveOrUpdateEventListener" />
					</list>
				</entry>
			</map>
		</property>
		
	 	  <property name="entityInterceptor">
			<ref bean="myIntercept" />
		</property>
		
	</bean>
  
	 <bean id="myIntercept"
		class="com.xbwl.common.orm.hibernate.XbwlHibernateInterceptor">
	</bean>


	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	
	<!-- 加入AOP支持 -->
	 <aop:aspectj-autoproxy proxy-target-class="true" />  
	
	<!-- SpringContext Holder -->
	<bean id="springContextHolder" class="com.xbwl.common.utils.SpringContextHolder" lazy-init="false"/>
	
</beans>